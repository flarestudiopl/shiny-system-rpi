// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Storage.StorageDatabase;

namespace Storage.Migrations
{
    [DbContext(typeof(EfContext))]
    [Migration("20190710180429_UserAndCounter")]
    partial class UserAndCounter
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("Domain.StorageDatabase.Counter", b =>
                {
                    b.Property<int>("CounterId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountedSeconds");

                    b.Property<int>("HeaterId");

                    b.Property<DateTime?>("ResetDate");

                    b.Property<int?>("ResettedByUserId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("CounterId");

                    b.HasIndex("ResettedByUserId");

                    b.ToTable("Counter");
                });

            modelBuilder.Entity("Domain.StorageDatabase.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("DisabledByUserId");

                    b.Property<DateTime?>("DisabledDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsBrowseable");

                    b.Property<DateTime?>("LastLogonDate");

                    b.Property<string>("LastSeenIpAddress");

                    b.Property<string>("Login")
                        .IsRequired();

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<string>("QuickLoginPinHash");

                    b.HasKey("UserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DisabledByUserId");

                    b.HasIndex("Login", "IsActive")
                        .IsUnique()
                        .HasFilter("[IsActive] = 1");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = -1,
                            CreatedDate = new DateTime(2019, 7, 10, 18, 4, 28, 876, DateTimeKind.Utc).AddTicks(8468),
                            IsActive = true,
                            IsBrowseable = true,
                            Login = "user",
                            PasswordHash = "3da810408ed48e255a05f80798db255a4ae32b205e895f08ffe0833338d03d71"
                        });
                });

            modelBuilder.Entity("Domain.StorageDatabase.Counter", b =>
                {
                    b.HasOne("Domain.StorageDatabase.User", "ResettedBy")
                        .WithMany()
                        .HasForeignKey("ResettedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.StorageDatabase.User", b =>
                {
                    b.HasOne("Domain.StorageDatabase.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.StorageDatabase.User", "DisabledBy")
                        .WithMany()
                        .HasForeignKey("DisabledByUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
